# Written by Thomas J Barnes
# Business Development Intern
# June 20, 2016
# 
# this flask framework connects the backend engine
# and front end html/css and javascript
from flask import Flask
from flask import request, render_template, jsonify, url_for, redirect
from jira import JIRA
import json, re, os
import requests
from requests.auth import HTTPBasicAuth

# instantiates the Flask application
app = Flask(__name__)

# URL for the website
url = "http://0.0.0.0:5000"
# URL for creation of issues via JIRA REST API
# create_issue_url = "http://testjira.transmarketgroup.com:8080/rest/api/2/issue/"

#jira_options = { 'server': 'http://testjira.transmarketgroup.com:8080', 'validate':"True" }
'''
try:
    print("Connecting to JIRA: %s" % jira_options['server'])
    jira = JIRA(options=jira_options,
                # Note the tuple
                basic_auth=('tommy.barnes', 'password'))
except Exception,e:
    print ("Failed to connect to JIRA: %s" % str(e))

'''
global data

issue_dict='''{
    "fields" : {
        "project": { "name": "JIRA-ATS", "key": "ATS" },
        "issuetype": { "name": "Interview" },
        "parent" : { "key" : "ATS-46" },
        "summary": "Interview TESTING",
        "description": "[Write observations of the candidate here]"
    }
}'''
print issue_dict

# creates issue via JIRA REST API using 'curl' and stores the output in r
# r = subprocess.check_output(['curl','-D-','-u','tommy.barnes:password','-X','POST','--data',data,'-H','Content-Type: application/json',create_issue_url])
#new_issue = jira.create_issue(fields=issue_dict, prefetch=True)
# issue key auto-generated by JIRA corresponding to Candidate
# issue_key = json.loads(r.split()[-1])['key']

header = {"Content-Type" : "application/json"}
url = "http://testjira.transmarketgroup.com:8080/rest/api/2/issue/"

r = requests.post(url, data=str(issue_dict), headers=header, auth=HTTPBasicAuth("tommy.barnes", "password"))
print r

# Template for the JSON object that becomes the issue fields:
    # First Name
    # Last Name
    # Email Address
    # Phone Number
    # Position
    # Position Type
    # Location
    # Degree Type + Degree
    # Issue Title ("Position | Position Type | Location - Last, First")
# api_request = '{ "fields": { "project": { "name": "JIRA-ATS", "key": "ATS" },' \
# + ' "issuetype": { "name": "Task" },' \
# + ' "customfield_10783": "%s",' \
# + ' "customfield_10784": "%s",' \
# + ' "customfield_10787": "%s",' \
# + ' "customfield_10792": "%s",' \
# + ' "customfield_10790": "%s",' \
# + ' "customfield_10791": "%s",' \
# + ' "customfield_10794": "%s",' \
# + ' "customfield_10788": "%s",' \
# + ' "customfield_10789": "%s",' \
# + ' "summary": "%s", '\
# + ' "description": "[Write observations of the candidate here]"} }'

# Function that removes non-standard characters from profile information
def sanitize(string):
    return ''.join(c for c in string if c.isalnum() or \
        c == "_" or \
        c == "-" or \
        c == "@" or \
        c == "(" or \
        c == ")" or \
        c == "/" or \
        c == "." or \
        c == "+" or \
        c == " ")

# Function that handles HTTP GET requests (renders the Career page)
@app.route("/", methods=['GET'])
def index():
    return render_template('index.html')

@app.route("/test", methods=['GET'])
def test():
    return 'TESTING TEXT'

# Function that handles HTTP POST requests
@app.route("/data", methods=['POST'])
def post_data():
    # Retrieve data from Career website via HTTP POST request
    # 'body' list that will store the POST request's 'multipart/form-data' content
    
    # JSON object corresponding to Candidate's issue fields
    # data = api_request % (content['First'],content['Last'],content['Email'],content['Phone'],content['Position'],content['PositionType'],content['Location'],content['School'],content['DegreeType']+' '+content['Degree'],content['Position']+\
    #     ' | '+content['PositionType']+' | '+content['Location']+' - '+content['Last']+','+content['First'])

    issue_dict='''{
        "fields" : {
            "project": { "name": "JIRA-ATS", "key": "ATS" },
            "issuetype": { "name": "Task" },
            "customfield_10783": \"%s\",
            "customfield_10784": \"%s\",
            "customfield_10787": \"%s\",
            "customfield_10792": \"%s\",
            "customfield_10790": \"%s\",
            "customfield_10791": \"%s\",
            "customfield_10794": \"%s\",
            "customfield_10788": \"%s\",
            "customfield_10789": \"%s\",
            "summary": \"%s\",
            "description": "[Write observations of the candidate here]"
        }
    }'''%(request.form['First'], request.form['Last'], request.form['Email'], request.form['Phone'], request.form['Position'], request.form['PositionType'], request.form['Location'], request.form['School'], request.form['DegreeType'] + " " + request.form['Degree'], request.form['Position']+' | '+request.form['PositionType']+' | '+request.form['Location']+' - '+request.form['Last']+','+request.form['First'])
    print issue_dict

    # creates issue via JIRA REST API using 'curl' and stores the output in r
    # r = subprocess.check_output(['curl','-D-','-u','tommy.barnes:password','-X','POST','--data',data,'-H','Content-Type: application/json',create_issue_url])
    #new_issue = jira.create_issue(fields=issue_dict, prefetch=True)
    # issue key auto-generated by JIRA corresponding to Candidate
    # issue_key = json.loads(r.split()[-1])['key']

    header = {"Content-Type" : "application/json"}
    url = "http://testjira.transmarketgroup.com:8080/rest/api/2/issue/"
    
    r = requests.post(url, data=str(issue_dict), headers=header, auth=HTTPBasicAuth("tommy.barnes", "password"))

    # distinct file name for Candidate's resume
    #resume_name = '%s-%s_(%s).pdf' % (content['First'], content['Last'], new_issue.key)

    # write resume PDF to server location
    #with open (resume_name,'w') as fh:
     #   fh.write(d[d.find("%PDF"):len(d)-59])
    
    # 'attachment_url' is the URI of attaching files to specific issues in JIRA REST API
    # attachment_url = 'http://testjira.transmarketgroup.com:8080/rest/api/2/issue/%s/attachments' % issue_key
    

    # attach resume to issue corresponding to 'issue_key' and delete it locally
    #jira.add_attachment(new_issue, resume_name)
    #os.remove(resume_name)
            
    # Routes the Candidate to a page that thanks him/her for submitting
    return r.text
"""
if __name__ == "__main__":
    # initialize backend engine of the JIRA_Feeder Application
    app.run(host=url.split(':')[1][2:], port=int(url.split(':')[2]), debug=True)"""

FIRST    = "customfield_10783"
LAST     = "customfield_10784"
EMAIL    = "customfield_10787"
PHONE    = "customfield_10792"
POSITION = "customfield_10790"
TYPE     = "customfield_10791"
LOCATION = "customfield_10794"
TITLE    = "customfield_10789"
SCHOOL   = 'customfield_10788'